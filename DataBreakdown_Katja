{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Import Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [],
   "source": [
    "users = pd.read_csv(\"Users.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['UserID', 'BirthYear', 'DA', 'DiagnosisYear', 'Gender', 'Impact',\n",
      "       'Levadopa', 'MAOB', 'Other', 'Parkinsons', 'Sided', 'Tremors', 'UPDRS'],\n",
      "      dtype='object')\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>UserID</th>\n",
       "      <th>BirthYear</th>\n",
       "      <th>DA</th>\n",
       "      <th>DiagnosisYear</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Impact</th>\n",
       "      <th>Levadopa</th>\n",
       "      <th>MAOB</th>\n",
       "      <th>Other</th>\n",
       "      <th>Parkinsons</th>\n",
       "      <th>Sided</th>\n",
       "      <th>Tremors</th>\n",
       "      <th>UPDRS</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>User_0EA27ICBLF</td>\n",
       "      <td>1952.0</td>\n",
       "      <td>True</td>\n",
       "      <td>2000</td>\n",
       "      <td>Female</td>\n",
       "      <td>Severe</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>Left</td>\n",
       "      <td>True</td>\n",
       "      <td>Don't know</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>User_0QAZFRHQHW</td>\n",
       "      <td>1959.0</td>\n",
       "      <td>False</td>\n",
       "      <td>------</td>\n",
       "      <td>Female</td>\n",
       "      <td>------</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>None</td>\n",
       "      <td>False</td>\n",
       "      <td>Don't know</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>User_0WTDIGPSBZ</td>\n",
       "      <td>1946.0</td>\n",
       "      <td>False</td>\n",
       "      <td>------</td>\n",
       "      <td>Female</td>\n",
       "      <td>------</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>None</td>\n",
       "      <td>False</td>\n",
       "      <td>Don't know</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>User_1HOEBIGASW</td>\n",
       "      <td>1944.0</td>\n",
       "      <td>False</td>\n",
       "      <td>------</td>\n",
       "      <td>Male</td>\n",
       "      <td>------</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>None</td>\n",
       "      <td>False</td>\n",
       "      <td>Don't know</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>User_1WMVCCU4RH</td>\n",
       "      <td>1953.0</td>\n",
       "      <td>False</td>\n",
       "      <td>2017</td>\n",
       "      <td>Male</td>\n",
       "      <td>Medium</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>Left</td>\n",
       "      <td>True</td>\n",
       "      <td>Don't know</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            UserID  BirthYear      DA DiagnosisYear   Gender    Impact  \\\n",
       "0  User_0EA27ICBLF     1952.0    True          2000   Female    Severe   \n",
       "1  User_0QAZFRHQHW     1959.0   False        ------   Female    ------   \n",
       "2  User_0WTDIGPSBZ     1946.0   False        ------   Female    ------   \n",
       "3  User_1HOEBIGASW     1944.0   False        ------     Male    ------   \n",
       "4  User_1WMVCCU4RH     1953.0   False          2017     Male    Medium   \n",
       "\n",
       "  Levadopa    MAOB   Other Parkinsons  Sided Tremors        UPDRS  \n",
       "0     True   False   False       True   Left    True   Don't know  \n",
       "1    False   False   False      False   None   False   Don't know  \n",
       "2    False   False   False      False   None   False   Don't know  \n",
       "3    False   False   False      False   None   False   Don't know  \n",
       "4    False   False   False       True   Left    True   Don't know  "
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(users.columns)\n",
    "users.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Modify DataFrame"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Turn the DataFrame into more usable with all numbers. <br>\n",
    "UserID: dropped first 5 digits, which are are only \"User_\" <br>\n",
    "Parkinsons: 1 for diagnosed with Parkinsons, 0 for not <br>\n",
    "DA: 1 for using, 0 for not <br>\n",
    "Levadopa: 1 for using, 0 for not <br>\n",
    "MAOB: 1 for using, 0 for not <br>\n",
    "Other: 1 for using, 0 for not <br>\n",
    "Gender: 1 for female, 0 for male <br>\n",
    "Tremors: 1 for yes, 0 for no <br>\n",
    "Impact: 0 - 3 for not applicable, mild, medium, severe <br>\n",
    "Sided: 0 for none, 1 for left, 2 for right <br>\n",
    "UPDRS: 0 for unknown, then 1-5 on scale <br>\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [],
   "source": [
    "conditions = [\n",
    "    (users['Impact'] == ' Mild'),\n",
    "    (users['Impact'] == ' Medium'),\n",
    "    (users['Impact'] == ' Severe'),\n",
    "    (users['Impact'] != ' Mild') & (users['Impact'] != ' Medium') & (users['Impact'] != 'Severe')\n",
    "    ]\n",
    "values = [1,2,3,0]\n",
    "\n",
    "conditions1 = [\n",
    "    (users['UPDRS'] == 'Don\\'t know'), \n",
    "    (users['UPDRS'] == '1'),\n",
    "    (users['UPDRS'] == '2'),\n",
    "    (users['UPDRS'] == '3'),\n",
    "    (users['UPDRS'] == '4'),\n",
    "    (users['UPDRS'] == '5')\n",
    "]\n",
    "values1 = [0,1,2,3,4,5]\n",
    "\n",
    "conditions2 = [\n",
    "    (users['Sided'] == ' None'),\n",
    "    (users['Sided'] == ' Left'),\n",
    "    (users['Sided'] == ' Right'),\n",
    "]\n",
    "values2 = [0,1,2]\n",
    "\n",
    "\n",
    "users['UserID'] = [e[5:] for e in users['UserID']]\n",
    "users['Gender'] = np.where(users['Gender'] == ' Female', 1, 0)\n",
    "users['Parkinsons'] = np.where(users['Parkinsons'] == ' True', 1, 0)\n",
    "users['DA'] = np.where(users['DA'] == ' True', 1, 0)\n",
    "users['Levadopa'] = np.where(users['Levadopa'] == ' True', 1, 0)\n",
    "users['MAOB'] = np.where(users['MAOB'] == ' True', 1, 0)\n",
    "users['Tremors'] = np.where(users['Tremors'] == ' True', 1, 0)\n",
    "users['Impact'] = np.select(conditions, values)\n",
    "users['Other'] = np.where(users['Other'] == ' True', 1, 0)\n",
    "users['Sided'] = np.select(conditions2, values2)\n",
    "users['UPDRS'] = np.select(conditions1, values1)\n",
    "users['BirthYear'] = pd.to_numeric(users['BirthYear'], errors='coerce')\n",
    "users['DiagnosisYear'] = pd.to_numeric(users['DiagnosisYear'], errors='coerce')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>UserID</th>\n",
       "      <th>BirthYear</th>\n",
       "      <th>DA</th>\n",
       "      <th>DiagnosisYear</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Impact</th>\n",
       "      <th>Levadopa</th>\n",
       "      <th>MAOB</th>\n",
       "      <th>Other</th>\n",
       "      <th>Parkinsons</th>\n",
       "      <th>Sided</th>\n",
       "      <th>Tremors</th>\n",
       "      <th>UPDRS</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0EA27ICBLF</td>\n",
       "      <td>1952.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2000.0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0QAZFRHQHW</td>\n",
       "      <td>1959.0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0WTDIGPSBZ</td>\n",
       "      <td>1946.0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1HOEBIGASW</td>\n",
       "      <td>1944.0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1WMVCCU4RH</td>\n",
       "      <td>1953.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2017.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1XNJCXS3EY</td>\n",
       "      <td>1936.0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2JTCBKUP8T</td>\n",
       "      <td>1958.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2013.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>2X17VCRRQA</td>\n",
       "      <td>1951.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2003.0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>310NXPGJPD</td>\n",
       "      <td>1961.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2015.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>39KQRZCESF</td>\n",
       "      <td>1942.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2013.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       UserID  BirthYear  DA  DiagnosisYear  Gender  Impact  Levadopa  MAOB  \\\n",
       "0  0EA27ICBLF     1952.0   1         2000.0       1       3         1     0   \n",
       "1  0QAZFRHQHW     1959.0   0            NaN       1       0         0     0   \n",
       "2  0WTDIGPSBZ     1946.0   0            NaN       1       0         0     0   \n",
       "3  1HOEBIGASW     1944.0   0            NaN       0       0         0     0   \n",
       "4  1WMVCCU4RH     1953.0   0         2017.0       0       2         0     0   \n",
       "5  1XNJCXS3EY     1936.0   0            NaN       0       0         0     0   \n",
       "6  2JTCBKUP8T     1958.0   0         2013.0       0       2         1     0   \n",
       "7  2X17VCRRQA     1951.0   0         2003.0       0       3         1     0   \n",
       "8  310NXPGJPD     1961.0   0         2015.0       1       2         1     0   \n",
       "9  39KQRZCESF     1942.0   1         2013.0       0       2         1     0   \n",
       "\n",
       "   Other  Parkinsons  Sided  Tremors  UPDRS  \n",
       "0      0           1      1        1      0  \n",
       "1      0           0      0        0      0  \n",
       "2      0           0      0        0      0  \n",
       "3      0           0      0        0      0  \n",
       "4      0           1      1        1      0  \n",
       "5      0           0      0        0      0  \n",
       "6      0           1      2        1      0  \n",
       "7      0           1      1        1      0  \n",
       "8      1           1      1        1      0  \n",
       "9      0           1      2        1      0  "
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "users.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data Breakdown\n",
    "Here, we examine how the participants break down into the various categories."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There are 169 observations in the parkinsons df.\n",
      "There are 58 observations in the none df.\n"
     ]
    }
   ],
   "source": [
    "parkinsons = users[users['Parkinsons'] == 1]\n",
    "none = users[users['Parkinsons'] == 0]\n",
    "print(\"There are\",len(parkinsons),\"observations in the parkinsons df.\")\n",
    "print(\"There are\",len(none),\"observations in the none df.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There are 33 people who take dopamine agonist.\n",
      "There are 194 people who do not (including those without parkinsons).\n"
     ]
    }
   ],
   "source": [
    "da = users[users['DA'] == 1]\n",
    "no_da = users.drop(da.index)\n",
    "print(\"There are\",len(da),\"people who take dopamine agonist.\")\n",
    "print(\"There are\",len(no_da),\"people who do not (including those without parkinsons).\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There are 112 taking levadopa.\n",
      "There are 115 people who don't take levadopa\n"
     ]
    }
   ],
   "source": [
    "lev = users[users['Levadopa'] == 1]\n",
    "no_lev = users[users['Levadopa'] == 0]\n",
    "print(\"There are\",len(lev),\"taking levadopa.\")\n",
    "print(\"There are\",len(no_lev),\"people who don't take levadopa\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There are 15 taking MAO-B inhibitor\n",
      "There are 212 people who don't take MAO-B inhibitor\n"
     ]
    }
   ],
   "source": [
    "mao = users[users['MAOB'] == 1]\n",
    "no_mao = users[users['MAOB'] == 0]\n",
    "print(\"There are\",len(mao),\"taking MAO-B inhibitor\")\n",
    "print(\"There are\",len(no_mao),\"people who don't take MAO-B inhibitor\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There are 69 taking other medication\n",
      "There are 158 people who don't take other medication\n"
     ]
    }
   ],
   "source": [
    "oth = users[users['Other'] == 1]\n",
    "no_oth = users[users['Other'] == 0]\n",
    "print(\"There are\",len(oth),\"taking other medication\")\n",
    "print(\"There are\",len(no_oth),\"people who don't take other medication\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There are 22 with PD taking no medication\n"
     ]
    }
   ],
   "source": [
    "med1 = parkinsons[parkinsons['Levadopa'] == 0]\n",
    "med2 = med1[med1['DA'] == 0]\n",
    "med3 = med2[med2['MAOB'] == 0]\n",
    "med4 = med3[med3['Other'] == 0]\n",
    "print(\"There are\",len(med4),\"with PD taking no medication\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Start Working with Tappy Files \n",
    "First, we find how many users we have that also have tappy data. Then, we isolate some parameters from the tappy data for each person."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "217\n",
      "217\n"
     ]
    }
   ],
   "source": [
    "# Get people in the User Data\n",
    "people_users = users['UserID'].tolist()\n",
    "\n",
    "# Get people in Tappy Data\n",
    "tappy_files = os.listdir('ArchivedData')\n",
    "tappy_users = tappy_files\n",
    "i = 0\n",
    "for file in tappy_files:\n",
    "    tappy_users[i] = file[:10]\n",
    "    i = i + 1\n",
    "\n",
    "# Isolate the users we want and make new Data Frame\n",
    "all_users = set(people_users).intersection(tappy_users)\n",
    "print(len(all_users))\n",
    "\n",
    "usersA = users[users['UserID'].isin(all_users)]\n",
    "usersA = usersA.reset_index(drop = True)\n",
    "print(len(usersA))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [],
   "source": [
    "from datetime import datetime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function creating proper data frame for a list of data files that in theory all correspond to same person\n",
    "def extract_tappy_df(tappy_files):\n",
    "    filesdf = [pd.read_csv('ArchivedData/' + file, delimiter = '\\t', index_col = False, names = ['UserKey', 'Date', 'Timestamp', 'Hand', 'Hold time', 'Direction', 'Latency time', 'Flight time']) for file in tappy_files]\n",
    "    files = filesdf\n",
    "    # Transform data frame to be more usable, and get rid of bad rows\n",
    "    for i in range(len(filesdf)):\n",
    "        file = filesdf[i]\n",
    "        file = file[(file['Hand'] == 'L') | (file['Hand'] == 'R') | (file['Hand'] == 'S')]\n",
    "        file = file[(file['Direction'] == 'LL') | (file['Direction'] == 'LR') | (file['Direction'] == 'LS') |(file['Direction'] == 'RL') | (file['Direction'] == 'RR') | (file['Direction'] == 'RS') | (file['Direction'] == 'SL') | (file['Direction'] == 'SR') | (file['Direction'] == 'SS')]\n",
    "        date = file['Date']\n",
    "        hold = file['Hold time']\n",
    "        latency = file['Latency time']\n",
    "        flight = file['Flight time']\n",
    "        file['Date'] = pd.to_datetime(date, errors='coerce', format='%y%M%d').dt.date\n",
    "        file['Hold time'] = pd.to_numeric(hold, errors = 'coerce')\n",
    "        file['Latency time'] = pd.to_numeric(latency, errors = 'coerce')\n",
    "        file['Flight time'] = pd.to_numeric(flight, errors = 'coerce')\n",
    "        file = file[(file['Hold time'] > 0) & (file['Flight time'] > 0) & (file['Latency time'] > 0) & (file['Hold time'] < 9000) & (file['Flight time'] < 9000) & (file['Latency time'] < 9000)]\n",
    "        del file['Flight time']\n",
    "        files[i] = file\n",
    "    df = pd.concat(files)\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function taking tappy data frame and extracting relevant features \n",
    "# Note those featurs are in flux\n",
    "def extract_features(tappy_df):\n",
    "    \n",
    "    #Mean, Std, Skew, Kurtosis\n",
    "    direction_group_mean = tappy_df.groupby('Direction').mean()\n",
    "    direction_group_mean = direction_group_mean.reindex(['LL', 'LR', 'LS', 'RL', 'RR', 'RS', 'SL', 'SR', 'SS'])\n",
    "    direction_group_mean = direction_group_mean.sort_index()\n",
    "    data_dir_mean = (direction_group_mean.values.flatten())\n",
    "    direction_group_std = tappy_df.groupby('Direction').std()\n",
    "    direction_group_std = direction_group_std.reindex(['LL', 'LR', 'LS', 'RL', 'RR', 'RS', 'SL', 'SR', 'SS'])\n",
    "    direction_group_std = direction_group_std.sort_index()\n",
    "    data_dir_std = (direction_group_std.values.flatten())\n",
    "    direction_group_skew = tappy_df.groupby('Direction').skew()\n",
    "    direction_group_skew = direction_group_skew.reindex(['LL', 'LR', 'LS', 'RL', 'RR', 'RS', 'SL', 'SR', 'SS'])\n",
    "    direction_group_skew = direction_group_skew.sort_index()\n",
    "    data_dir_skew = (direction_group_skew.values.flatten())\n",
    "    direction_group_kurt = tappy_df.groupby('Direction').apply(pd.DataFrame.kurt)\n",
    "    direction_group_kurt = direction_group_kurt.reindex(['LL', 'LR', 'LS', 'RL', 'RR', 'RS', 'SL', 'SR', 'SS'])\n",
    "    direction_group_kurt = direction_group_kurt.sort_index()\n",
    "    data_dir_kurt = (direction_group_kurt.values.flatten())\n",
    "    \n",
    "    \n",
    "    #Mean, Std, Skew, Kurtosis\n",
    "    hand_group_mean = tappy_df.groupby('Hand').mean()\n",
    "    hand_group_mean = hand_group_mean.reindex(['L', 'R', 'S'])\n",
    "    hand_group_mean = hand_group_mean.sort_index()\n",
    "    data_hand_mean = (hand_group_mean.values.flatten())\n",
    "    hand_group_std = tappy_df.groupby('Hand').std()\n",
    "    hand_group_std = hand_group_std.reindex(['L', 'R', 'S'])\n",
    "    hand_group_std = hand_group_std.sort_index()\n",
    "    data_hand_std = (hand_group_std.values.flatten())\n",
    "    hand_group_skew = tappy_df.groupby('Hand').skew()\n",
    "    hand_group_skew = hand_group_skew.reindex(['L', 'R', 'S'])\n",
    "    hand_group_skew = hand_group_skew.sort_index()\n",
    "    data_hand_skew = (hand_group_skew.values.flatten())\n",
    "    hand_group_kurt = tappy_df.groupby('Hand').apply(pd.DataFrame.kurt)\n",
    "    hand_group_kurt = hand_group_kurt.reindex(['L', 'R', 'S'])\n",
    "    hand_group_kurt = hand_group_kurt.sort_index()\n",
    "    data_hand_kurt = (hand_group_kurt.values.flatten())\n",
    "    \n",
    "    #Extra\n",
    "    LR_hand_hold = data_hand_mean[0] - data_hand_mean[2]\n",
    "    LL_RR_latency = data_dir_mean[1] - data_dir_mean[9]\n",
    "    LR_RL_latency = data_dir_mean[3] - data_dir_mean[7]\n",
    "    \n",
    "    holdmean = tappy_df['Hold time'].mean()\n",
    "    latencymean = tappy_df['Latency time'].mean()\n",
    "    \n",
    "    extra = np.array([LR_hand_hold, LL_RR_latency, LR_RL_latency, holdmean, latencymean])\n",
    "    data = np.concatenate((data_dir_mean, data_dir_std, data_dir_skew, data_dir_kurt, data_hand_mean, data_hand_std, data_hand_skew, data_hand_kurt, extra), axis = 0)\n",
    "    return data\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function which given a user, returns an array of files associated to user\n",
    "def get_user(user):\n",
    "    filenames = os.listdir('ArchivedData')\n",
    "    user_data = np.array([])\n",
    "    for filename in filenames:\n",
    "        if user in filename:\n",
    "            user_data = np.append([filename], user_data)\n",
    "    return user_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/k_vslv/opt/anaconda3/lib/python3.8/site-packages/IPython/core/interactiveshell.py:3418: DtypeWarning: Columns (4,6) have mixed types.Specify dtype option on import or set low_memory=False.\n",
      "  exec(code_obj, self.user_global_ns, self.user_ns)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "UserKey          object\n",
      "Date             object\n",
      "Timestamp        object\n",
      "Hand             object\n",
      "Hold time       float64\n",
      "Direction        object\n",
      "Latency time    float64\n",
      "dtype: object\n",
      "[ 8.21696103e+01  2.67539116e+02  8.19468100e+01  2.77610541e+02\n",
      "  1.13962069e+02  2.05833328e+02  7.46712948e+01  4.16858561e+02\n",
      "  7.92906010e+01  3.23165962e+02  1.15777373e+02  2.34720470e+02\n",
      "  6.98286798e+01  3.58036492e+02  7.56636297e+01  3.44552603e+02\n",
      "  8.46258427e+01  1.46228464e+02  1.91813613e+01  8.02403013e+02\n",
      "  1.55731398e+01  9.54879468e+01  1.74928851e+01  6.12700659e+01\n",
      "  1.32180506e+01  6.09244876e+01  2.66980322e+01  2.81465783e+03\n",
      "  1.90097093e+01  8.00973336e+01  1.51921704e+01  1.37879687e+03\n",
      "  1.54680187e+01  8.91972797e+01  2.90251817e+01  5.42823302e+01\n",
      "  1.48764802e+00  1.96998576e+02 -2.12148676e-01  8.84416275e-01\n",
      "  2.11934006e+00  1.40064431e+00 -4.25395039e-02 -1.18870888e+00\n",
      "  4.21066802e+00  5.68765885e+01  3.04614222e-01  1.06676542e+00\n",
      "  3.46541307e+00  1.15879754e+02  4.08387230e-01  5.74995767e-03\n",
      "  1.35114985e+00  1.57255467e+00  7.77928497e+00  3.93947850e+04\n",
      "  1.89665085e+00 -2.89602762e-01  3.33840122e+01  2.80456545e+00\n",
      "  6.04643191e-01  2.16127283e+00  4.19163886e+01  3.23878940e+03\n",
      "  1.53186417e+00  7.40678282e-01  5.33387066e+01  1.34788833e+04\n",
      "  1.27612783e+00 -1.18647061e+00  4.11779521e+00  1.13811371e+01\n",
      "  7.77519545e+01  3.28291600e+02  7.93036238e+01  3.19021262e+02\n",
      "  1.14373963e+02  2.15204982e+02  1.76035996e+01  8.22357910e+02\n",
      "  2.46070906e+01  2.46685848e+03  1.83121119e+01  6.97786635e+01\n",
      "  1.58747889e+00  1.91586901e+02  4.13084091e+00  6.48749856e+01\n",
      "  1.29082793e+00  1.32984214e+00  1.15319890e+01  3.73671171e+04\n",
      "  4.49518457e+01  4.21599179e+03  1.89352154e+01  2.04773910e+00\n",
      " -1.55166933e+00 -5.56268464e+01 -1.39248020e+02  8.70884643e+01\n",
      "  2.98263200e+02]\n",
      "<class 'numpy.ndarray'>\n",
      "<class 'list'>\n",
      "621\n",
      "['0EA27ICBLF_1607.txt' '0EA27ICBLF_1608.txt']\n"
     ]
    }
   ],
   "source": [
    "# Testing Code\n",
    "file_name1 = '0EA27ICBLF_1607.txt'\n",
    "file_name2 = '0EA27ICBLF_1608.txt'\n",
    "tappy_data = extract_tappy_df([file_name1, file_name2])\n",
    "tappy_info = extract_features(tappy_data)\n",
    "print(tappy_data.dtypes)\n",
    "print(extract_features(tappy_data))\n",
    "print(type(tappy_info))\n",
    "filenames = os.listdir('ArchivedData')\n",
    "print(type(filenames))\n",
    "print(len(filenames))\n",
    "user = users['UserID'][0]\n",
    "print(get_user(user))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['0EA27ICBLF_1607.txt' '0EA27ICBLF_1608.txt']\n",
      "      UserKey        Date     Timestamp Hand  Hold time Direction  \\\n",
      "0  0EA27ICBLF  2016-01-22  18:41:04.336    L      101.6        LL   \n",
      "1  0EA27ICBLF  2016-01-22  18:42:14.070    L       85.9        LL   \n",
      "2  0EA27ICBLF  2016-01-22  18:42:14.273    L       78.1        LL   \n",
      "3  0EA27ICBLF  2016-01-22  18:42:14.617    L       62.5        LL   \n",
      "4  0EA27ICBLF  2016-01-22  18:42:15.586    S      125.0        LS   \n",
      "5  0EA27ICBLF  2016-01-22  18:42:15.766    L       78.1        SL   \n",
      "6  0EA27ICBLF  2016-01-22  18:42:15.969    R       85.9        LR   \n",
      "7  0EA27ICBLF  2016-01-22  18:42:16.875    R       85.9        RR   \n",
      "8  0EA27ICBLF  2016-01-22  18:42:17.289    L       70.3        RL   \n",
      "9  0EA27ICBLF  2016-01-22  18:42:17.727    L      101.6        LL   \n",
      "\n",
      "   Latency time  \n",
      "0         234.4  \n",
      "1         437.5  \n",
      "2         210.9  \n",
      "3         359.4  \n",
      "4         187.5  \n",
      "5         226.6  \n",
      "6         195.3  \n",
      "7         359.4  \n",
      "8         429.7  \n",
      "9         406.3  \n",
      "[ 8.21696103e+01  2.67539116e+02  8.19468100e+01  2.77610541e+02\n",
      "  1.13962069e+02  2.05833328e+02  7.46712948e+01  4.16858561e+02\n",
      "  7.92906010e+01  3.23165962e+02  1.15777373e+02  2.34720470e+02\n",
      "  6.98286798e+01  3.58036492e+02  7.56636297e+01  3.44552603e+02\n",
      "  8.46258427e+01  1.46228464e+02  1.91813613e+01  8.02403013e+02\n",
      "  1.55731398e+01  9.54879468e+01  1.74928851e+01  6.12700659e+01\n",
      "  1.32180506e+01  6.09244876e+01  2.66980322e+01  2.81465783e+03\n",
      "  1.90097093e+01  8.00973336e+01  1.51921704e+01  1.37879687e+03\n",
      "  1.54680187e+01  8.91972797e+01  2.90251817e+01  5.42823302e+01\n",
      "  1.48764802e+00  1.96998576e+02 -2.12148676e-01  8.84416275e-01\n",
      "  2.11934006e+00  1.40064431e+00 -4.25395039e-02 -1.18870888e+00\n",
      "  4.21066802e+00  5.68765885e+01  3.04614222e-01  1.06676542e+00\n",
      "  3.46541307e+00  1.15879754e+02  4.08387230e-01  5.74995767e-03\n",
      "  1.35114985e+00  1.57255467e+00  7.77928497e+00  3.93947850e+04\n",
      "  1.89665085e+00 -2.89602762e-01  3.33840122e+01  2.80456545e+00\n",
      "  6.04643191e-01  2.16127283e+00  4.19163886e+01  3.23878940e+03\n",
      "  1.53186417e+00  7.40678282e-01  5.33387066e+01  1.34788833e+04\n",
      "  1.27612783e+00 -1.18647061e+00  4.11779521e+00  1.13811371e+01\n",
      "  7.77519545e+01  3.28291600e+02  7.93036238e+01  3.19021262e+02\n",
      "  1.14373963e+02  2.15204982e+02  1.76035996e+01  8.22357910e+02\n",
      "  2.46070906e+01  2.46685848e+03  1.83121119e+01  6.97786635e+01\n",
      "  1.58747889e+00  1.91586901e+02  4.13084091e+00  6.48749856e+01\n",
      "  1.29082793e+00  1.32984214e+00  1.15319890e+01  3.73671171e+04\n",
      "  4.49518457e+01  4.21599179e+03  1.89352154e+01  2.04773910e+00\n",
      " -1.55166933e+00 -5.56268464e+01 -1.39248020e+02  8.70884643e+01\n",
      "  2.98263200e+02]\n",
      "101\n"
     ]
    }
   ],
   "source": [
    "# Testing Code\n",
    "user = users['UserID'][0]\n",
    "files = get_user(user)\n",
    "print(files)\n",
    "tappy_data = extract_tappy_df(files)\n",
    "print(tappy_data.head(10))\n",
    "tappy_info = extract_features(tappy_data)\n",
    "print(tappy_info)\n",
    "print(len(tappy_info))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/k_vslv/opt/anaconda3/lib/python3.8/site-packages/IPython/core/interactiveshell.py:3418: DtypeWarning: Columns (4,6) have mixed types.Specify dtype option on import or set low_memory=False.\n",
      "  exec(code_obj, self.user_global_ns, self.user_ns)\n",
      "/Users/k_vslv/opt/anaconda3/lib/python3.8/site-packages/IPython/core/interactiveshell.py:3418: DtypeWarning: Columns (7) have mixed types.Specify dtype option on import or set low_memory=False.\n",
      "  exec(code_obj, self.user_global_ns, self.user_ns)\n",
      "/Users/k_vslv/opt/anaconda3/lib/python3.8/site-packages/IPython/core/interactiveshell.py:3418: DtypeWarning: Columns (6,7) have mixed types.Specify dtype option on import or set low_memory=False.\n",
      "  exec(code_obj, self.user_global_ns, self.user_ns)\n",
      "/Users/k_vslv/opt/anaconda3/lib/python3.8/site-packages/IPython/core/interactiveshell.py:3418: DtypeWarning: Columns (1,4) have mixed types.Specify dtype option on import or set low_memory=False.\n",
      "  exec(code_obj, self.user_global_ns, self.user_ns)\n",
      "/Users/k_vslv/opt/anaconda3/lib/python3.8/site-packages/IPython/core/interactiveshell.py:3418: DtypeWarning: Columns (7) have mixed types.Specify dtype option on import or set low_memory=False.\n",
      "  exec(code_obj, self.user_global_ns, self.user_ns)\n",
      "/Users/k_vslv/opt/anaconda3/lib/python3.8/site-packages/IPython/core/interactiveshell.py:3418: DtypeWarning: Columns (7) have mixed types.Specify dtype option on import or set low_memory=False.\n",
      "  exec(code_obj, self.user_global_ns, self.user_ns)\n",
      "/Users/k_vslv/opt/anaconda3/lib/python3.8/site-packages/IPython/core/interactiveshell.py:3418: DtypeWarning: Columns (4,6) have mixed types.Specify dtype option on import or set low_memory=False.\n",
      "  exec(code_obj, self.user_global_ns, self.user_ns)\n",
      "/Users/k_vslv/opt/anaconda3/lib/python3.8/site-packages/IPython/core/interactiveshell.py:3418: DtypeWarning: Columns (6) have mixed types.Specify dtype option on import or set low_memory=False.\n",
      "  exec(code_obj, self.user_global_ns, self.user_ns)\n",
      "/Users/k_vslv/opt/anaconda3/lib/python3.8/site-packages/IPython/core/interactiveshell.py:3418: DtypeWarning: Columns (4,6,7) have mixed types.Specify dtype option on import or set low_memory=False.\n",
      "  exec(code_obj, self.user_global_ns, self.user_ns)\n",
      "/Users/k_vslv/opt/anaconda3/lib/python3.8/site-packages/IPython/core/interactiveshell.py:3418: DtypeWarning: Columns (4,6) have mixed types.Specify dtype option on import or set low_memory=False.\n",
      "  exec(code_obj, self.user_global_ns, self.user_ns)\n",
      "/Users/k_vslv/opt/anaconda3/lib/python3.8/site-packages/IPython/core/interactiveshell.py:3418: DtypeWarning: Columns (1,4) have mixed types.Specify dtype option on import or set low_memory=False.\n",
      "  exec(code_obj, self.user_global_ns, self.user_ns)\n",
      "/Users/k_vslv/opt/anaconda3/lib/python3.8/site-packages/IPython/core/interactiveshell.py:3418: DtypeWarning: Columns (7) have mixed types.Specify dtype option on import or set low_memory=False.\n",
      "  exec(code_obj, self.user_global_ns, self.user_ns)\n",
      "/Users/k_vslv/opt/anaconda3/lib/python3.8/site-packages/IPython/core/interactiveshell.py:3418: DtypeWarning: Columns (1,4,6,7) have mixed types.Specify dtype option on import or set low_memory=False.\n",
      "  exec(code_obj, self.user_global_ns, self.user_ns)\n",
      "/Users/k_vslv/opt/anaconda3/lib/python3.8/site-packages/IPython/core/interactiveshell.py:3418: DtypeWarning: Columns (4,6,7) have mixed types.Specify dtype option on import or set low_memory=False.\n",
      "  exec(code_obj, self.user_global_ns, self.user_ns)\n",
      "/Users/k_vslv/opt/anaconda3/lib/python3.8/site-packages/IPython/core/interactiveshell.py:3418: DtypeWarning: Columns (4,6) have mixed types.Specify dtype option on import or set low_memory=False.\n",
      "  exec(code_obj, self.user_global_ns, self.user_ns)\n",
      "/Users/k_vslv/opt/anaconda3/lib/python3.8/site-packages/IPython/core/interactiveshell.py:3418: DtypeWarning: Columns (7) have mixed types.Specify dtype option on import or set low_memory=False.\n",
      "  exec(code_obj, self.user_global_ns, self.user_ns)\n",
      "/Users/k_vslv/opt/anaconda3/lib/python3.8/site-packages/IPython/core/interactiveshell.py:3418: DtypeWarning: Columns (4,6) have mixed types.Specify dtype option on import or set low_memory=False.\n",
      "  exec(code_obj, self.user_global_ns, self.user_ns)\n",
      "/Users/k_vslv/opt/anaconda3/lib/python3.8/site-packages/IPython/core/interactiveshell.py:3418: DtypeWarning: Columns (4,6,7) have mixed types.Specify dtype option on import or set low_memory=False.\n",
      "  exec(code_obj, self.user_global_ns, self.user_ns)\n",
      "/Users/k_vslv/opt/anaconda3/lib/python3.8/site-packages/IPython/core/interactiveshell.py:3418: DtypeWarning: Columns (6) have mixed types.Specify dtype option on import or set low_memory=False.\n",
      "  exec(code_obj, self.user_global_ns, self.user_ns)\n"
     ]
    }
   ],
   "source": [
    "# Get data for all users with data\n",
    "user_names = usersA['UserID']\n",
    "NUM_FEATURES = 101\n",
    "NUM_USERS = len(user_names)\n",
    "new_data = np.zeros((NUM_USERS, NUM_FEATURES))\n",
    "i = 0\n",
    "for user in user_names: \n",
    "    files = get_user(user)\n",
    "    tappy_data = extract_tappy_df(files)\n",
    "    tappy_info = extract_features(tappy_data)\n",
    "    new_data[i] = tappy_info\n",
    "    i = i + 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>UserID</th>\n",
       "      <th>BirthYear</th>\n",
       "      <th>DA</th>\n",
       "      <th>DiagnosisYear</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Impact</th>\n",
       "      <th>Levadopa</th>\n",
       "      <th>MAOB</th>\n",
       "      <th>Other</th>\n",
       "      <th>Parkinsons</th>\n",
       "      <th>...</th>\n",
       "      <th>LLatencyKurt</th>\n",
       "      <th>RHoldKurt</th>\n",
       "      <th>RLatencyKurt</th>\n",
       "      <th>SHoldKurt</th>\n",
       "      <th>SLatencyKurt</th>\n",
       "      <th>LRHold_Diff</th>\n",
       "      <th>LLRRLatency_Diff</th>\n",
       "      <th>LRRLLatency_Diff</th>\n",
       "      <th>HoldMean</th>\n",
       "      <th>LatencyMean</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0EA27ICBLF</td>\n",
       "      <td>1952.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2000.0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>-1.160590</td>\n",
       "      <td>44.944694</td>\n",
       "      <td>-1.138668</td>\n",
       "      <td>18.938591</td>\n",
       "      <td>2.047950</td>\n",
       "      <td>-1.555339</td>\n",
       "      <td>-10.278247</td>\n",
       "      <td>-139.245790</td>\n",
       "      <td>87.090011</td>\n",
       "      <td>286.112183</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0QAZFRHQHW</td>\n",
       "      <td>1959.0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.736605</td>\n",
       "      <td>110.960777</td>\n",
       "      <td>-0.838186</td>\n",
       "      <td>0.696979</td>\n",
       "      <td>0.597395</td>\n",
       "      <td>-2.663930</td>\n",
       "      <td>40.979771</td>\n",
       "      <td>-18.540793</td>\n",
       "      <td>102.873688</td>\n",
       "      <td>405.924138</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1HOEBIGASW</td>\n",
       "      <td>1944.0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.775209</td>\n",
       "      <td>-0.007518</td>\n",
       "      <td>-1.291575</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.243978</td>\n",
       "      <td>-4.588235</td>\n",
       "      <td>64.026190</td>\n",
       "      <td>65.568254</td>\n",
       "      <td>463.917460</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1XNJCXS3EY</td>\n",
       "      <td>1936.0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.235101</td>\n",
       "      <td>24.142310</td>\n",
       "      <td>-0.177558</td>\n",
       "      <td>6.900573</td>\n",
       "      <td>-0.340523</td>\n",
       "      <td>48.079984</td>\n",
       "      <td>25.711714</td>\n",
       "      <td>2.742036</td>\n",
       "      <td>123.793469</td>\n",
       "      <td>325.569638</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2JTCBKUP8T</td>\n",
       "      <td>1958.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2013.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0.083280</td>\n",
       "      <td>2.216855</td>\n",
       "      <td>-0.447737</td>\n",
       "      <td>6.529645</td>\n",
       "      <td>-0.368982</td>\n",
       "      <td>-1.529482</td>\n",
       "      <td>-21.948033</td>\n",
       "      <td>39.472609</td>\n",
       "      <td>90.409640</td>\n",
       "      <td>327.473805</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2X17VCRRQA</td>\n",
       "      <td>1951.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2003.0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0.813987</td>\n",
       "      <td>2.232887</td>\n",
       "      <td>3.726850</td>\n",
       "      <td>66.079168</td>\n",
       "      <td>10.284850</td>\n",
       "      <td>-2.262416</td>\n",
       "      <td>5.405360</td>\n",
       "      <td>220.750000</td>\n",
       "      <td>90.442364</td>\n",
       "      <td>406.111687</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>310NXPGJPD</td>\n",
       "      <td>1961.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2015.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.810729</td>\n",
       "      <td>1.756346</td>\n",
       "      <td>-1.156156</td>\n",
       "      <td>7.897142</td>\n",
       "      <td>-0.657191</td>\n",
       "      <td>3.811419</td>\n",
       "      <td>0.345793</td>\n",
       "      <td>30.769484</td>\n",
       "      <td>157.748139</td>\n",
       "      <td>528.164552</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>39KQRZCESF</td>\n",
       "      <td>1942.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2013.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.537863</td>\n",
       "      <td>2.499579</td>\n",
       "      <td>0.378854</td>\n",
       "      <td>3462.512084</td>\n",
       "      <td>4.736702</td>\n",
       "      <td>20.670712</td>\n",
       "      <td>42.904888</td>\n",
       "      <td>-16.074696</td>\n",
       "      <td>178.433283</td>\n",
       "      <td>315.140509</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>3DIXPRIOSW</td>\n",
       "      <td>1936.0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.407991</td>\n",
       "      <td>0.502078</td>\n",
       "      <td>-0.024682</td>\n",
       "      <td>-0.641270</td>\n",
       "      <td>-0.641451</td>\n",
       "      <td>-19.412952</td>\n",
       "      <td>34.890816</td>\n",
       "      <td>74.204668</td>\n",
       "      <td>153.256493</td>\n",
       "      <td>521.718863</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>3MZWDTW7CC</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0.585523</td>\n",
       "      <td>16.182714</td>\n",
       "      <td>-0.037989</td>\n",
       "      <td>3.941674</td>\n",
       "      <td>1.652295</td>\n",
       "      <td>37.194764</td>\n",
       "      <td>-22.286395</td>\n",
       "      <td>15.777456</td>\n",
       "      <td>154.354971</td>\n",
       "      <td>391.228320</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10 rows × 114 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       UserID  BirthYear  DA  DiagnosisYear  Gender  Impact  Levadopa  MAOB  \\\n",
       "0  0EA27ICBLF     1952.0   1         2000.0       1       3         1     0   \n",
       "1  0QAZFRHQHW     1959.0   0            NaN       1       0         0     0   \n",
       "2  1HOEBIGASW     1944.0   0            NaN       0       0         0     0   \n",
       "3  1XNJCXS3EY     1936.0   0            NaN       0       0         0     0   \n",
       "4  2JTCBKUP8T     1958.0   0         2013.0       0       2         1     0   \n",
       "5  2X17VCRRQA     1951.0   0         2003.0       0       3         1     0   \n",
       "6  310NXPGJPD     1961.0   0         2015.0       1       2         1     0   \n",
       "7  39KQRZCESF     1942.0   1         2013.0       0       2         1     0   \n",
       "8  3DIXPRIOSW     1936.0   0            NaN       0       0         0     0   \n",
       "9  3MZWDTW7CC        NaN   0            NaN       1       0         0     0   \n",
       "\n",
       "   Other  Parkinsons  ...  LLatencyKurt   RHoldKurt  RLatencyKurt  \\\n",
       "0      0           1  ...     -1.160590   44.944694     -1.138668   \n",
       "1      0           0  ...     -0.736605  110.960777     -0.838186   \n",
       "2      0           0  ...     -0.775209   -0.007518     -1.291575   \n",
       "3      0           0  ...      0.235101   24.142310     -0.177558   \n",
       "4      0           1  ...      0.083280    2.216855     -0.447737   \n",
       "5      0           1  ...      0.813987    2.232887      3.726850   \n",
       "6      1           1  ...     -0.810729    1.756346     -1.156156   \n",
       "7      0           1  ...     -0.537863    2.499579      0.378854   \n",
       "8      0           0  ...     -0.407991    0.502078     -0.024682   \n",
       "9      0           1  ...      0.585523   16.182714     -0.037989   \n",
       "\n",
       "     SHoldKurt  SLatencyKurt  LRHold_Diff  LLRRLatency_Diff  LRRLLatency_Diff  \\\n",
       "0    18.938591      2.047950    -1.555339        -10.278247       -139.245790   \n",
       "1     0.696979      0.597395    -2.663930         40.979771        -18.540793   \n",
       "2          NaN           NaN     1.243978         -4.588235         64.026190   \n",
       "3     6.900573     -0.340523    48.079984         25.711714          2.742036   \n",
       "4     6.529645     -0.368982    -1.529482        -21.948033         39.472609   \n",
       "5    66.079168     10.284850    -2.262416          5.405360        220.750000   \n",
       "6     7.897142     -0.657191     3.811419          0.345793         30.769484   \n",
       "7  3462.512084      4.736702    20.670712         42.904888        -16.074696   \n",
       "8    -0.641270     -0.641451   -19.412952         34.890816         74.204668   \n",
       "9     3.941674      1.652295    37.194764        -22.286395         15.777456   \n",
       "\n",
       "     HoldMean  LatencyMean  \n",
       "0   87.090011   286.112183  \n",
       "1  102.873688   405.924138  \n",
       "2   65.568254   463.917460  \n",
       "3  123.793469   325.569638  \n",
       "4   90.409640   327.473805  \n",
       "5   90.442364   406.111687  \n",
       "6  157.748139   528.164552  \n",
       "7  178.433283   315.140509  \n",
       "8  153.256493   521.718863  \n",
       "9  154.354971   391.228320  \n",
       "\n",
       "[10 rows x 114 columns]"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Data frame holding all the data\n",
    "columns = ['LLHold', 'LLLatency','LRHold', 'LRLatency','LSHold', 'LSLatency', 'RLHold', 'RLLatency','RRHold', 'RRLatency', 'RSHold', 'RSLatency', 'SLHold', 'SLLatency','SRHold', 'SRLatency', 'SSHold', 'SSLatency',\n",
    "           'LLHoldStd', 'LLLatencyStd','LRHoldStd', 'LRLatencyStd','LSHoldStd', 'LSLatencyStd', 'RLHoldStd', 'RLLatencyStd','RRHoldStd', 'RRLatencyStd', 'RSHoldStd', 'RSLatencyStd', 'SLHoldStd', 'SLLatencyStd','SRHoldStd', 'SRLatencyStd', 'SSHoldStd', 'SSLatencyStd',\n",
    "           'LLHoldSkew', 'LLLatencySkew','LRHoldSkew', 'LRLatencySkew','LSHoldSkew', 'LSLatencySkew', 'RLHoldSkew', 'RLLatencySkew','RRHoldSkew', 'RRLatencySkew', 'RSHoldSkew', 'RSLatencySkew', 'SLHoldSkew', 'SLLatencySkew','SRHoldSkew', 'SRLatencySkew', 'SSHoldSkew', 'SSLatencySkew',\n",
    "           'LLHoldKurt', 'LLLatencyKurt','LRHoldKurt', 'LRLatencyKurt','LSHoldKurt', 'LSLatencyKurt', 'RLHoldKurt', 'RLLatencyKurt','RRHoldKurt', 'RRLatencyKurt', 'RSHoldKurt', 'RSLatencyKurt', 'SLHoldKurt', 'SLLatencyKurt','SRHoldKurt', 'SRLatencyKurt', 'SSHoldKurt', 'SSLatencyKurt',\n",
    "           'LHold', 'LLatency', 'RHold', 'RLatency', 'SHold', 'SLatency', 'LHoldStd', 'LLatencyStd', 'RHoldStd', 'RLatencyStd', 'SHoldStd', 'SLatencyStd', 'LHoldSkew', 'LLatencySkew', 'RHoldSkew', 'RLatencySkew', 'SHoldSkew', 'SLatencySkew', 'LHoldKurt', 'LLatencyKurt', 'RHoldKurt', 'RLatencyKurt', 'SHoldKurt', 'SLatencyKurt',\n",
    "           'LRHold_Diff', 'LLRRLatency_Diff', 'LRRLLatency_Diff', 'HoldMean', 'LatencyMean']\n",
    "user_info = pd.DataFrame(new_data, columns=columns)\n",
    "\n",
    "dataAll = pd.concat([usersA, user_info], axis=1, join='inner')\n",
    "dataAll.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "217"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(dataAll)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataAll.to_csv(r'AllData.csv', index = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get DataFrames for several groups\n",
    "dataNoPD = dataAll[dataAll['Parkinsons'] == 0]\n",
    "dataPD = dataAll[dataAll['Parkinsons'] == 1]\n",
    "dataTremors = dataAll[(dataAll['Parkinsons'] == 1) & (dataAll['Tremors'] == 1)]\n",
    "dataNoTremors = dataAll[(dataAll['Parkinsons'] == 1) & (dataAll['Tremors'] == 0)]\n",
    "dataMed = dataPD[(dataPD['Levadopa'] == 1) | (dataPD['MAOB'] == 1) | (dataPD['DA'] == 1) | (dataPD['Other'] == 1)]\n",
    "dataNoMed = dataPD[(dataPD['Levadopa'] == 0) & (dataPD['MAOB'] == 0) & (dataPD['DA'] == 0) & (dataPD['Other'] == 0)]\n",
    "dataMild = dataPD[(dataPD['Impact'] == 1)]\n",
    "dataMedium = dataPD[dataPD['Impact'] == 2]\n",
    "dataSevere = dataPD[dataPD['Impact'] == 3]\n",
    "dataLev = dataPD[dataPD['Levadopa'] == 1]\n",
    "dataNoLev = dataPD[dataPD['Levadopa'] == 0]\n",
    "dataDA = dataPD[dataPD['DA'] == 1]\n",
    "dataNoDA = dataPD[dataPD['DA'] == 0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Plot the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " Tremors vs No tremors\n",
      "LHoldStd         7.602657\n",
      "LLatencyStd     16.308293\n",
      "RHoldStd         9.551315\n",
      "RLatencyStd     18.043620\n",
      "SHoldStd        15.682077\n",
      "SLatencyStd     18.946992\n",
      "LHoldSkew        0.888090\n",
      "LLatencySkew    -0.320891\n",
      "RHoldSkew        1.813562\n",
      "RLatencySkew    -0.191058\n",
      "SHoldSkew        2.523314\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "#print('PD vs no PD \\n')\n",
    "#print(dataNoPD.mean() - dataPD.mean())\n",
    "\n",
    "#print('\\n PDNoMed vs PDMed')\n",
    "#print(dataMed.mean() - dataNoMed.mean())\n",
    "\n",
    "print('\\n Tremors vs No tremors')\n",
    "print((dataLev.mean() - dataNoLev.mean())[90:101])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 250,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 1440x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Hold & Latency for levels\n",
    "hold_data = [dataNoPD['HoldMean'].mean(), dataMild['HoldMean'].mean(), dataMedium['HoldMean'].mean(), dataSevere['HoldMean'].mean()]\n",
    "latency_data = [dataNoPD['LatencyMean'].mean(), dataMild['LatencyMean'].mean(), dataMedium['LatencyMean'].mean(), dataSevere['LatencyMean'].mean()]\n",
    "hold_STD = [dataNoPD['HoldMean'].std(), dataMild['HoldMean'].std(), dataMedium['HoldMean'].std(), dataSevere['HoldMean'].std()]\n",
    "latency_STD = [dataNoPD['LatencyMean'].std(), dataMild['LatencyMean'].std(), dataMedium['LatencyMean'].std(), dataSevere['LatencyMean'].std()]\n",
    "\n",
    "materials = ['No PD', 'Mild PD', 'Medium PD', 'Severe PD']\n",
    "x_pos = np.arange(len(materials))\n",
    "\n",
    "fig, (hold_graph, latency_graph) = plt.subplots(1,2, figsize = (20,8))\n",
    "\n",
    "hold_graph.bar(x_pos, hold_data, yerr = hold_STD, align='center', alpha=0.5, ecolor='black', capsize=10)\n",
    "hold_graph.set_xticks(x_pos)\n",
    "hold_graph.set_xticklabels(materials, fontsize = 16)\n",
    "hold_graph.set_title('Hold Time of Different levels of PD', fontsize = 18)\n",
    "\n",
    "latency_graph.bar(x_pos, latency_data, yerr=latency_STD, align='center', alpha=0.5, ecolor='black', capsize=10)\n",
    "latency_graph.set_xticks(x_pos)\n",
    "latency_graph.set_xticklabels(materials, fontsize = 16)\n",
    "latency_graph.set_title('Latency Time of Different levels of PD',fontsize = 18)\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 251,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Hold & Latency for Medicated vs Unmedicated\n",
    "hold_data = [dataNoMed['HoldMean'].mean(), dataMed['HoldMean'].mean()]\n",
    "latency_data = [dataNoMed['LatencyMean'].mean(), dataMed['LatencyMean'].mean()]\n",
    "hold_STD = [dataNoMed['HoldMean'].std(), dataMed['HoldMean'].std()]\n",
    "latency_STD = [dataNoMed['LatencyMean'].std(), dataMed['LatencyMean'].std()]\n",
    "\n",
    "materials = ['No Medication', 'Some Medication']\n",
    "x_pos = np.arange(len(materials))\n",
    "\n",
    "fig, (hold_graph, latency_graph) = plt.subplots(1,2, figsize = (20,8))\n",
    "\n",
    "hold_graph.bar(x_pos, hold_data, yerr = hold_STD, align='center', alpha=0.5, ecolor='black', capsize=10)\n",
    "hold_graph.set_xticks(x_pos)\n",
    "hold_graph.set_xticklabels(materials, fontsize= 16)\n",
    "hold_graph.set_title('Hold Time taking into account Medication', fontsize = 18)\n",
    "\n",
    "latency_graph.bar(x_pos, latency_data, yerr=latency_STD, align='center', alpha=0.5, ecolor='black', capsize=10)\n",
    "latency_graph.set_xticks(x_pos)\n",
    "latency_graph.set_xticklabels(materials, fontsize = 16)\n",
    "latency_graph.set_title('Latency Time taking into account Medication', fontsize = 18)\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Hold & Latency for Tremors vs No Tremors\n",
    "hold_data = [dataNoTremors['HoldMean'].mean(), dataTremors['HoldMean'].mean()]\n",
    "latency_data = [dataNoTremors['LatencyMean'].mean(), dataTremors['LatencyMean'].mean()]\n",
    "hold_STD = [dataNoTremors['HoldMean'].std(), dataTremors['HoldMean'].std()]\n",
    "latency_STD = [dataNoTremors['LatencyMean'].std(), dataTremors['LatencyMean'].std()]\n",
    "\n",
    "materials = ['No Tremors', 'Tremors']\n",
    "x_pos = np.arange(len(materials))\n",
    "\n",
    "fig, (hold_graph, latency_graph) = plt.subplots(1,2, figsize = (20,8))\n",
    "\n",
    "hold_graph.bar(x_pos, hold_data, yerr = hold_STD, align='center', alpha=0.5, ecolor='black', capsize=10)\n",
    "hold_graph.set_xticks(x_pos)\n",
    "hold_graph.set_xticklabels(materials)\n",
    "hold_graph.set_title('Hold Time taking into account Tremors')\n",
    "\n",
    "latency_graph.bar(x_pos, latency_data, yerr=latency_STD, align='center', alpha=0.5, ecolor='black', capsize=10)\n",
    "latency_graph.set_xticks(x_pos)\n",
    "latency_graph.set_xticklabels(materials)\n",
    "latency_graph.set_title('Latency Time taking into account Tremors')\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Hold & Latency for Medicated vs Unmedicated\n",
    "hold_data = [dataNoLev['HoldMean'].mean(), dataLev['HoldMean'].mean()]\n",
    "latency_data = [dataNoLev['LatencyMean'].mean(), dataLev['LatencyMean'].mean()]\n",
    "hold_STD = [dataNoLev['HoldMean'].std(), dataLev['HoldMean'].std()]\n",
    "latency_STD = [dataNoLev['LatencyMean'].std(), dataLev['LatencyMean'].std()]\n",
    "\n",
    "materials = ['No Levadopa', 'Taking Levadopa']\n",
    "x_pos = np.arange(len(materials))\n",
    "\n",
    "fig, (hold_graph, latency_graph) = plt.subplots(1,2, figsize = (20,8))\n",
    "\n",
    "hold_graph.bar(x_pos, hold_data, yerr = hold_STD, align='center', alpha=0.5, ecolor='black', capsize=10)\n",
    "hold_graph.set_xticks(x_pos)\n",
    "hold_graph.set_xticklabels(materials)\n",
    "hold_graph.set_title('Hold Time taking into account Levadopa')\n",
    "\n",
    "latency_graph.bar(x_pos, latency_data, yerr=latency_STD, align='center', alpha=0.5, ecolor='black', capsize=10)\n",
    "latency_graph.set_xticks(x_pos)\n",
    "latency_graph.set_xticklabels(materials)\n",
    "latency_graph.set_title('Latency Time taking into account Levadopa')\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Hold & Latency for Medicated vs Unmedicated\n",
    "hold_data = [dataNoDA['HoldMean'].mean(), dataDA['HoldMean'].mean()]\n",
    "latency_data = [dataNoDA['LatencyMean'].mean(), dataDA['LatencyMean'].mean()]\n",
    "hold_STD = [dataNoDA['HoldMean'].std(), dataDA['HoldMean'].std()]\n",
    "latency_STD = [dataNoLev['LatencyMean'].std(), dataLev['LatencyMean'].std()]\n",
    "\n",
    "materials = ['No DA', 'Taking DA']\n",
    "x_pos = np.arange(len(materials))\n",
    "\n",
    "fig, (hold_graph, latency_graph) = plt.subplots(1,2, figsize = (20,8))\n",
    "\n",
    "hold_graph.bar(x_pos, hold_data, yerr = hold_STD, align='center', alpha=0.5, ecolor='black', capsize=10)\n",
    "hold_graph.set_xticks(x_pos)\n",
    "hold_graph.set_xticklabels(materials)\n",
    "hold_graph.set_title('Hold Time taking into account DA')\n",
    "\n",
    "latency_graph.bar(x_pos, latency_data, yerr=latency_STD, align='center', alpha=0.5, ecolor='black', capsize=10)\n",
    "latency_graph.set_xticks(x_pos)\n",
    "latency_graph.set_xticklabels(materials)\n",
    "latency_graph.set_title('Latency Time taking into account DA')\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# See how sidedness effects\n",
    "dataR = dataPD[dataPD['Sided'] == 2]\n",
    "dataL = dataPD[dataPD['Sided'] == 1]\n",
    "\n",
    "R_data = [dataPD['RHold'].mean(), dataR['RHold'].mean(), dataL['RHold'].mean()]\n",
    "L_data = [dataPD['LHold'].mean(), dataR['LHold'].mean(), dataL['LHold'].mean()]\n",
    "R_STD  = [dataPD['RHold'].std(), dataR['RHold'].std(), dataL['RHold'].std()]\n",
    "L_STD = [dataPD['LHold'].std(), dataR['LHold'].std(), dataL['LHold'].std()]\n",
    "\n",
    "\n",
    "# Hold & Latency for Medicated vs Unmedicated\n",
    "materials = ['PD', 'Right Sidedness', 'Left Sidedness']\n",
    "x_pos = np.arange(len(materials))\n",
    "\n",
    "fig, (hold_graph, latency_graph) = plt.subplots(1,2, figsize = (20,8))\n",
    "\n",
    "hold_graph.bar(x_pos, R_data, yerr = R_STD, align='center', alpha=0.5, ecolor='black', capsize=10)\n",
    "hold_graph.set_xticks(x_pos)\n",
    "hold_graph.set_xticklabels(materials)\n",
    "hold_graph.set_title('Right Hold Time')\n",
    "\n",
    "latency_graph.bar(x_pos, L_data, yerr=L_STD, align='center', alpha=0.5, ecolor='black', capsize=10)\n",
    "latency_graph.set_xticks(x_pos)\n",
    "latency_graph.set_xticklabels(materials)\n",
    "latency_graph.set_title('Left Hold Time')\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5.2235683801598185\n",
      "3.1240094810988666\n"
     ]
    }
   ],
   "source": [
    "print(dataR['RHold'].mean() - dataL['RHold'].mean())\n",
    "print(dataR['LHold'].mean() - dataL['LHold'].mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "107"
      ]
     },
     "execution_count": 128,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(dataLev)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataMildLev = dataMild[dataMild['Levadopa'] == 0]\n",
    "dataMildNoLev = dataMild[dataMild['Levadopa'] == 1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32\n",
      "32\n"
     ]
    }
   ],
   "source": [
    "print(len(dataMildLev))\n",
    "print(len(dataMildNoLev))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "64"
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(dataMild)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "107"
      ]
     },
     "execution_count": 134,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(dataLev)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "55"
      ]
     },
     "execution_count": 135,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(dataNoLev)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Hold & Latency for Medicated vs Unmedicated\n",
    "hold_data = [dataMildNoLev['HoldMean'].mean(), dataMildLev['HoldMean'].mean()]\n",
    "latency_data = [dataMildNoLev['LatencyMean'].mean(), dataMildLev['LatencyMean'].mean()]\n",
    "hold_STD = [dataMildNoLev['HoldMean'].std(), dataMildLev['HoldMean'].std()]\n",
    "latency_STD = [dataMildNoLev['LatencyMean'].std(), dataMildLev['LatencyMean'].std()]\n",
    "\n",
    "materials = ['No Levadopa', 'Taking Levadopa']\n",
    "x_pos = np.arange(len(materials))\n",
    "\n",
    "fig, (hold_graph, latency_graph) = plt.subplots(1,2, figsize = (20,8))\n",
    "\n",
    "hold_graph.bar(x_pos, hold_data, yerr = hold_STD, align='center', alpha=0.5, ecolor='black', capsize=10)\n",
    "hold_graph.set_xticks(x_pos)\n",
    "hold_graph.set_xticklabels(materials)\n",
    "hold_graph.set_title('Hold Time taking into account Levadopa for Mild')\n",
    "\n",
    "latency_graph.bar(x_pos, latency_data, yerr=latency_STD, align='center', alpha=0.5, ecolor='black', capsize=10)\n",
    "latency_graph.set_xticks(x_pos)\n",
    "latency_graph.set_xticklabels(materials)\n",
    "latency_graph.set_title('Latency Time taking into account Levadopa for Mild')\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Figure out Breakdown of Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Without PD:  55\n",
      "With PD:  162\n",
      "Mild:  64\n",
      "Medium:  70\n",
      "Severe:  24\n",
      "Levadopa:  107\n",
      "DA:  31\n",
      "MAOB:  14\n",
      "Levadopa + Mild:  32\n",
      "Levadopa + Medium:  51\n",
      "Levadopa + Severe:  22\n",
      "Levadopa + DA:  19\n",
      "Levadopa + DA + MAOB:  5\n",
      "Levadopa + (DA or MAOB):  23\n",
      "No Levadopa, DA, or MAOB:  40\n",
      "No Medication:  21\n",
      "Tremors:  97\n",
      "Tremors + No PD:  1\n",
      "Tremors + Mild:  40\n",
      "Tremors + Medium:  41\n",
      "Tremors + Severe:  15\n"
     ]
    }
   ],
   "source": [
    "print(\"Without PD: \", len(dataNoPD))\n",
    "print(\"With PD: \", len(dataPD))\n",
    "print(\"Mild: \", len(dataMild))\n",
    "print('Medium: ', len(dataMedium))\n",
    "print('Severe: ', len(dataSevere))\n",
    "print('Levadopa: ', len(dataLev))\n",
    "print('DA: ', len(dataDA))\n",
    "print('MAOB: ', len(dataPD[dataPD['MAOB'] == 1]))\n",
    "print('Levadopa + Mild: ', len(dataLev[dataLev['Impact'] == 1]))\n",
    "print('Levadopa + Medium: ', len(dataLev[dataLev['Impact'] == 2]))\n",
    "print('Levadopa + Severe: ', len(dataLev[dataLev['Impact'] == 3]))\n",
    "print('Levadopa + DA: ', len(dataLev[dataLev['DA'] == 1]))\n",
    "print('Levadopa + DA + MAOB: ', len(dataLev[(dataLev['DA'] == 1) & (dataLev['MAOB'] == 1)]))\n",
    "print('Levadopa + (DA or MAOB): ', len(dataLev[(dataLev['DA'] == 1) | (dataLev['MAOB'] == 1)]))\n",
    "print('No Levadopa, DA, or MAOB: ', len(dataPD[(dataPD['Levadopa'] == 0) & (dataPD['MAOB'] == 0) & (dataPD['DA'] == 0)]))\n",
    "print('No Medication: ', len(dataPD[(dataPD['Levadopa'] == 0) & (dataPD['MAOB'] == 0) & (dataPD['DA'] == 0) & (dataPD['Other'] == 0)]))\n",
    "print('Tremors: ', len(dataTremors))\n",
    "print('Tremors + No PD: ', len(dataTremors[dataTremors['Impact'] == 0]))\n",
    "print('Tremors + Mild: ', len(dataTremors[dataTremors['Impact'] == 1]))\n",
    "print('Tremors + Medium: ', len(dataTremors[dataTremors['Impact'] == 2]))\n",
    "print('Tremors + Severe: ', len(dataTremors[dataTremors['Impact'] == 3]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataTestMed = dataPD[((dataPD['Levadopa'] == 0) & (dataPD['DA'] == 0)) | ((dataPD['Levadopa'] == 1) & (dataPD['DA'] == 0))]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "131"
      ]
     },
     "execution_count": 163,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(dataTestMed)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "88"
      ]
     },
     "execution_count": 164,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(dataTestMed[dataTestMed['Levadopa'] == 1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "43"
      ]
     },
     "execution_count": 165,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(dataTestMed[dataTestMed['Levadopa'] == 0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Do Logistic Regression for Medication Info"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['UserID', 'BirthYear', 'DA', 'DiagnosisYear', 'Gender', 'Impact',\n",
       "       'Levadopa', 'MAOB', 'Other', 'Parkinsons',\n",
       "       ...\n",
       "       'LLatencyKurt', 'RHoldKurt', 'RLatencyKurt', 'SHoldKurt',\n",
       "       'SLatencyKurt', 'LRHold_Diff', 'LLRRLatency_Diff', 'LRRLLatency_Diff',\n",
       "       'HoldMean', 'LatencyMean'],\n",
       "      dtype='object', length=114)"
      ]
     },
     "execution_count": 199,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataTestMed.columns\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "metadata": {},
   "outputs": [],
   "source": [
    "columns = ['Levadopa', 'LLHold', 'LLLatency','LRHold', 'LRLatency','LSHold', 'LSLatency', 'RLHold', 'RLLatency','RRHold', 'RRLatency', 'RSHold', 'RSLatency', 'SLHold', 'SLLatency','SRHold', 'SRLatency', 'SSHold', 'SSLatency',\n",
    "           'LLHoldStd', 'LLLatencyStd','LRHoldStd', 'LRLatencyStd','LSHoldStd', 'LSLatencyStd', 'RLHoldStd', 'RLLatencyStd','RRHoldStd', 'RRLatencyStd', 'RSHoldStd', 'RSLatencyStd', 'SLHoldStd', 'SLLatencyStd','SRHoldStd', 'SRLatencyStd', 'SSHoldStd', 'SSLatencyStd',\n",
    "           'LLHoldSkew', 'LLLatencySkew','LRHoldSkew', 'LRLatencySkew','LSHoldSkew', 'LSLatencySkew', 'RLHoldSkew', 'RLLatencySkew','RRHoldSkew', 'RRLatencySkew', 'RSHoldSkew', 'RSLatencySkew', 'SLHoldSkew', 'SLLatencySkew','SRHoldSkew', 'SRLatencySkew', 'SSHoldSkew', 'SSLatencySkew',\n",
    "           'LLHoldKurt', 'LLLatencyKurt','LRHoldKurt', 'LRLatencyKurt','LSHoldKurt', 'LSLatencyKurt', 'RLHoldKurt', 'RLLatencyKurt','RRHoldKurt', 'RRLatencyKurt', 'RSHoldKurt', 'RSLatencyKurt', 'SLHoldKurt', 'SLLatencyKurt','SRHoldKurt', 'SRLatencyKurt', 'SSHoldKurt', 'SSLatencyKurt',\n",
    "           'LHold', 'LLatency', 'RHold', 'RLatency', 'SHold', 'SLatency', 'LHoldStd', 'LLatencyStd', 'RHoldStd', 'RLatencyStd', 'SHoldStd', 'SLatencyStd', 'LHoldSkew', 'LLatencySkew', 'RHoldSkew', 'RLatencySkew', 'SHoldSkew', 'SLatencySkew', 'LHoldKurt', 'LLatencyKurt', 'RHoldKurt', 'RLatencyKurt', 'SHoldKurt', 'SLatencyKurt',\n",
    "           'LRHold_Diff', 'LLRRLatency_Diff', 'LRRLLatency_Diff', 'HoldMean', 'LatencyMean']\n",
    "dataTest = dataTestMed[columns]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Levadopa', 'LLHold', 'LLLatency', 'LRHold', 'LRLatency', 'LSHold',\n",
       "       'LSLatency', 'RLHold', 'RLLatency', 'RRHold',\n",
       "       ...\n",
       "       'LLatencyKurt', 'RHoldKurt', 'RLatencyKurt', 'SHoldKurt',\n",
       "       'SLatencyKurt', 'LRHold_Diff', 'LLRRLatency_Diff', 'LRRLLatency_Diff',\n",
       "       'HoldMean', 'LatencyMean'],\n",
       "      dtype='object', length=102)"
      ]
     },
     "execution_count": 201,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataTest.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataTest = dataTest.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 223,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 227,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = dataTest.iloc[:,1:102]\n",
    "y = dataTest.iloc[:,0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 228,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train,X_test,y_train,y_test = train_test_split(X,y,\n",
    "                                                test_size=.25,\n",
    "                                                shuffle=True,\n",
    "                                                random_state=614,\n",
    "                                                stratify=y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 229,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>LLHold</th>\n",
       "      <th>LLLatency</th>\n",
       "      <th>LRHold</th>\n",
       "      <th>LRLatency</th>\n",
       "      <th>LSHold</th>\n",
       "      <th>LSLatency</th>\n",
       "      <th>RLHold</th>\n",
       "      <th>RLLatency</th>\n",
       "      <th>RRHold</th>\n",
       "      <th>RRLatency</th>\n",
       "      <th>...</th>\n",
       "      <th>LLatencyKurt</th>\n",
       "      <th>RHoldKurt</th>\n",
       "      <th>RLatencyKurt</th>\n",
       "      <th>SHoldKurt</th>\n",
       "      <th>SLatencyKurt</th>\n",
       "      <th>LRHold_Diff</th>\n",
       "      <th>LLRRLatency_Diff</th>\n",
       "      <th>LRRLLatency_Diff</th>\n",
       "      <th>HoldMean</th>\n",
       "      <th>LatencyMean</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>172.798081</td>\n",
       "      <td>564.111514</td>\n",
       "      <td>168.567403</td>\n",
       "      <td>517.130663</td>\n",
       "      <td>202.307656</td>\n",
       "      <td>575.404306</td>\n",
       "      <td>175.160000</td>\n",
       "      <td>599.158545</td>\n",
       "      <td>159.258795</td>\n",
       "      <td>482.413253</td>\n",
       "      <td>...</td>\n",
       "      <td>0.882159</td>\n",
       "      <td>47.382914</td>\n",
       "      <td>-0.255786</td>\n",
       "      <td>-0.318140</td>\n",
       "      <td>0.655388</td>\n",
       "      <td>9.891345</td>\n",
       "      <td>81.698261</td>\n",
       "      <td>-82.027882</td>\n",
       "      <td>172.733350</td>\n",
       "      <td>542.720092</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>151</th>\n",
       "      <td>107.494055</td>\n",
       "      <td>361.224815</td>\n",
       "      <td>117.718141</td>\n",
       "      <td>575.198243</td>\n",
       "      <td>136.445832</td>\n",
       "      <td>240.394261</td>\n",
       "      <td>107.924315</td>\n",
       "      <td>509.107732</td>\n",
       "      <td>114.057026</td>\n",
       "      <td>378.375165</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.468260</td>\n",
       "      <td>6.842799</td>\n",
       "      <td>-1.089022</td>\n",
       "      <td>4.749312</td>\n",
       "      <td>11.336877</td>\n",
       "      <td>-7.678655</td>\n",
       "      <td>-17.150349</td>\n",
       "      <td>66.090512</td>\n",
       "      <td>116.118726</td>\n",
       "      <td>410.772223</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>207</th>\n",
       "      <td>107.825517</td>\n",
       "      <td>222.878195</td>\n",
       "      <td>93.207968</td>\n",
       "      <td>222.908560</td>\n",
       "      <td>106.630948</td>\n",
       "      <td>215.764140</td>\n",
       "      <td>110.061592</td>\n",
       "      <td>267.236711</td>\n",
       "      <td>97.853721</td>\n",
       "      <td>190.382895</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.486225</td>\n",
       "      <td>2.403875</td>\n",
       "      <td>-0.696227</td>\n",
       "      <td>4042.946797</td>\n",
       "      <td>0.425574</td>\n",
       "      <td>13.027339</td>\n",
       "      <td>32.495300</td>\n",
       "      <td>-44.328151</td>\n",
       "      <td>103.388599</td>\n",
       "      <td>228.297645</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>170</th>\n",
       "      <td>82.659858</td>\n",
       "      <td>244.919347</td>\n",
       "      <td>70.380092</td>\n",
       "      <td>216.132762</td>\n",
       "      <td>112.605680</td>\n",
       "      <td>168.681260</td>\n",
       "      <td>85.428171</td>\n",
       "      <td>218.878455</td>\n",
       "      <td>72.364867</td>\n",
       "      <td>243.894132</td>\n",
       "      <td>...</td>\n",
       "      <td>1.967103</td>\n",
       "      <td>4.862728</td>\n",
       "      <td>1.834647</td>\n",
       "      <td>1.472967</td>\n",
       "      <td>3.868616</td>\n",
       "      <td>12.655727</td>\n",
       "      <td>1.025214</td>\n",
       "      <td>-2.745693</td>\n",
       "      <td>83.647193</td>\n",
       "      <td>232.655868</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>160</th>\n",
       "      <td>95.412092</td>\n",
       "      <td>327.217304</td>\n",
       "      <td>101.513070</td>\n",
       "      <td>358.879510</td>\n",
       "      <td>91.793763</td>\n",
       "      <td>264.662575</td>\n",
       "      <td>90.637375</td>\n",
       "      <td>307.492511</td>\n",
       "      <td>95.452207</td>\n",
       "      <td>377.832246</td>\n",
       "      <td>...</td>\n",
       "      <td>1.734434</td>\n",
       "      <td>0.559554</td>\n",
       "      <td>0.456827</td>\n",
       "      <td>3.678615</td>\n",
       "      <td>5.529785</td>\n",
       "      <td>-6.411388</td>\n",
       "      <td>-50.614942</td>\n",
       "      <td>51.386999</td>\n",
       "      <td>95.028322</td>\n",
       "      <td>338.399493</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>67.806061</td>\n",
       "      <td>328.526591</td>\n",
       "      <td>66.723337</td>\n",
       "      <td>502.431155</td>\n",
       "      <td>69.156615</td>\n",
       "      <td>320.957715</td>\n",
       "      <td>68.077203</td>\n",
       "      <td>440.390940</td>\n",
       "      <td>67.745306</td>\n",
       "      <td>378.687181</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.120530</td>\n",
       "      <td>3.832937</td>\n",
       "      <td>-1.164925</td>\n",
       "      <td>2.347644</td>\n",
       "      <td>2.275637</td>\n",
       "      <td>0.540898</td>\n",
       "      <td>-50.160589</td>\n",
       "      <td>62.040215</td>\n",
       "      <td>67.550355</td>\n",
       "      <td>393.061721</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>124.285207</td>\n",
       "      <td>300.323155</td>\n",
       "      <td>127.421731</td>\n",
       "      <td>335.508287</td>\n",
       "      <td>154.746610</td>\n",
       "      <td>284.022090</td>\n",
       "      <td>125.795492</td>\n",
       "      <td>321.131506</td>\n",
       "      <td>124.941855</td>\n",
       "      <td>332.621036</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.763792</td>\n",
       "      <td>5.016262</td>\n",
       "      <td>-0.861353</td>\n",
       "      <td>7.929980</td>\n",
       "      <td>-0.220441</td>\n",
       "      <td>-0.862979</td>\n",
       "      <td>-32.297880</td>\n",
       "      <td>14.376781</td>\n",
       "      <td>132.385339</td>\n",
       "      <td>316.478452</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>162</th>\n",
       "      <td>135.480394</td>\n",
       "      <td>224.052588</td>\n",
       "      <td>141.257793</td>\n",
       "      <td>264.740785</td>\n",
       "      <td>203.611463</td>\n",
       "      <td>229.841376</td>\n",
       "      <td>135.999821</td>\n",
       "      <td>214.318296</td>\n",
       "      <td>145.985362</td>\n",
       "      <td>261.677319</td>\n",
       "      <td>...</td>\n",
       "      <td>3.889012</td>\n",
       "      <td>586.049205</td>\n",
       "      <td>0.829656</td>\n",
       "      <td>0.533183</td>\n",
       "      <td>4.686549</td>\n",
       "      <td>-9.419882</td>\n",
       "      <td>-37.624731</td>\n",
       "      <td>50.422489</td>\n",
       "      <td>150.783660</td>\n",
       "      <td>244.520430</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>106.254638</td>\n",
       "      <td>214.069229</td>\n",
       "      <td>100.672499</td>\n",
       "      <td>184.913356</td>\n",
       "      <td>117.885289</td>\n",
       "      <td>235.609071</td>\n",
       "      <td>100.334228</td>\n",
       "      <td>173.708172</td>\n",
       "      <td>96.389963</td>\n",
       "      <td>196.489620</td>\n",
       "      <td>...</td>\n",
       "      <td>4.384774</td>\n",
       "      <td>108.489014</td>\n",
       "      <td>3.768761</td>\n",
       "      <td>3666.762518</td>\n",
       "      <td>3.574728</td>\n",
       "      <td>2.964788</td>\n",
       "      <td>17.579609</td>\n",
       "      <td>11.205184</td>\n",
       "      <td>102.532969</td>\n",
       "      <td>212.124353</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137</th>\n",
       "      <td>108.409204</td>\n",
       "      <td>359.725746</td>\n",
       "      <td>104.640595</td>\n",
       "      <td>304.914750</td>\n",
       "      <td>123.335943</td>\n",
       "      <td>330.528114</td>\n",
       "      <td>108.875789</td>\n",
       "      <td>376.383289</td>\n",
       "      <td>98.727411</td>\n",
       "      <td>398.474365</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.643166</td>\n",
       "      <td>1.210138</td>\n",
       "      <td>-0.746055</td>\n",
       "      <td>0.541358</td>\n",
       "      <td>1.362247</td>\n",
       "      <td>6.509503</td>\n",
       "      <td>-38.748619</td>\n",
       "      <td>-71.468540</td>\n",
       "      <td>107.790066</td>\n",
       "      <td>369.034668</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>63 rows × 101 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         LLHold   LLLatency      LRHold   LRLatency      LSHold   LSLatency  \\\n",
       "23   172.798081  564.111514  168.567403  517.130663  202.307656  575.404306   \n",
       "151  107.494055  361.224815  117.718141  575.198243  136.445832  240.394261   \n",
       "207  107.825517  222.878195   93.207968  222.908560  106.630948  215.764140   \n",
       "170   82.659858  244.919347   70.380092  216.132762  112.605680  168.681260   \n",
       "160   95.412092  327.217304  101.513070  358.879510   91.793763  264.662575   \n",
       "..          ...         ...         ...         ...         ...         ...   \n",
       "55    67.806061  328.526591   66.723337  502.431155   69.156615  320.957715   \n",
       "10   124.285207  300.323155  127.421731  335.508287  154.746610  284.022090   \n",
       "162  135.480394  224.052588  141.257793  264.740785  203.611463  229.841376   \n",
       "30   106.254638  214.069229  100.672499  184.913356  117.885289  235.609071   \n",
       "137  108.409204  359.725746  104.640595  304.914750  123.335943  330.528114   \n",
       "\n",
       "         RLHold   RLLatency      RRHold   RRLatency  ...  LLatencyKurt  \\\n",
       "23   175.160000  599.158545  159.258795  482.413253  ...      0.882159   \n",
       "151  107.924315  509.107732  114.057026  378.375165  ...     -0.468260   \n",
       "207  110.061592  267.236711   97.853721  190.382895  ...     -0.486225   \n",
       "170   85.428171  218.878455   72.364867  243.894132  ...      1.967103   \n",
       "160   90.637375  307.492511   95.452207  377.832246  ...      1.734434   \n",
       "..          ...         ...         ...         ...  ...           ...   \n",
       "55    68.077203  440.390940   67.745306  378.687181  ...     -0.120530   \n",
       "10   125.795492  321.131506  124.941855  332.621036  ...     -0.763792   \n",
       "162  135.999821  214.318296  145.985362  261.677319  ...      3.889012   \n",
       "30   100.334228  173.708172   96.389963  196.489620  ...      4.384774   \n",
       "137  108.875789  376.383289   98.727411  398.474365  ...     -0.643166   \n",
       "\n",
       "      RHoldKurt  RLatencyKurt    SHoldKurt  SLatencyKurt  LRHold_Diff  \\\n",
       "23    47.382914     -0.255786    -0.318140      0.655388     9.891345   \n",
       "151    6.842799     -1.089022     4.749312     11.336877    -7.678655   \n",
       "207    2.403875     -0.696227  4042.946797      0.425574    13.027339   \n",
       "170    4.862728      1.834647     1.472967      3.868616    12.655727   \n",
       "160    0.559554      0.456827     3.678615      5.529785    -6.411388   \n",
       "..          ...           ...          ...           ...          ...   \n",
       "55     3.832937     -1.164925     2.347644      2.275637     0.540898   \n",
       "10     5.016262     -0.861353     7.929980     -0.220441    -0.862979   \n",
       "162  586.049205      0.829656     0.533183      4.686549    -9.419882   \n",
       "30   108.489014      3.768761  3666.762518      3.574728     2.964788   \n",
       "137    1.210138     -0.746055     0.541358      1.362247     6.509503   \n",
       "\n",
       "     LLRRLatency_Diff  LRRLLatency_Diff    HoldMean  LatencyMean  \n",
       "23          81.698261        -82.027882  172.733350   542.720092  \n",
       "151        -17.150349         66.090512  116.118726   410.772223  \n",
       "207         32.495300        -44.328151  103.388599   228.297645  \n",
       "170          1.025214         -2.745693   83.647193   232.655868  \n",
       "160        -50.614942         51.386999   95.028322   338.399493  \n",
       "..                ...               ...         ...          ...  \n",
       "55         -50.160589         62.040215   67.550355   393.061721  \n",
       "10         -32.297880         14.376781  132.385339   316.478452  \n",
       "162        -37.624731         50.422489  150.783660   244.520430  \n",
       "30          17.579609         11.205184  102.532969   212.124353  \n",
       "137        -38.748619        -71.468540  107.790066   369.034668  \n",
       "\n",
       "[63 rows x 101 columns]"
      ]
     },
     "execution_count": 229,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 230,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.pipeline import Pipeline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 231,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Pipeline(steps=[('scale', StandardScaler()), ('logR', LogisticRegression())])"
      ]
     },
     "execution_count": 231,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pipe = Pipeline([('scale',StandardScaler()),\n",
    "                    ('logR',LogisticRegression())])\n",
    "\n",
    "\n",
    "pipe.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 234,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_train_pred = pipe['logR'].predict(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 235,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
       "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
       "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1])"
      ]
     },
     "execution_count": 235,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 237,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "23     1\n",
       "151    1\n",
       "207    1\n",
       "170    1\n",
       "160    0\n",
       "      ..\n",
       "55     0\n",
       "10     0\n",
       "162    1\n",
       "30     0\n",
       "137    1\n",
       "Name: Levadopa, Length: 63, dtype: int64"
      ]
     },
     "execution_count": 237,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 238,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import confusion_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 239,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1, 20],\n",
       "       [ 1, 41]])"
      ]
     },
     "execution_count": 239,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "confusion_matrix(y_train, y_train_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 241,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.6721311475409836\n",
      "0.9761904761904762\n",
      "0.6666666666666666\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import precision_score\n",
    "from sklearn.metrics import recall_score\n",
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "print(precision_score(y_train, y_train_pred))\n",
    "print(recall_score(y_train, y_train_pred))\n",
    "print(accuracy_score(y_train, y_train_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 242,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_test_pred = pipe['logR'].predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 243,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.631578947368421\n",
      "0.8571428571428571\n",
      "0.5714285714285714\n"
     ]
    }
   ],
   "source": [
    "print(precision_score(y_test, y_test_pred))\n",
    "print(recall_score(y_test, y_test_pred))\n",
    "print(accuracy_score(y_test, y_test_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 248,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>LLHold</th>\n",
       "      <th>LLLatency</th>\n",
       "      <th>LRHold</th>\n",
       "      <th>LRLatency</th>\n",
       "      <th>LSHold</th>\n",
       "      <th>LSLatency</th>\n",
       "      <th>RLHold</th>\n",
       "      <th>RLLatency</th>\n",
       "      <th>RRHold</th>\n",
       "      <th>RRLatency</th>\n",
       "      <th>...</th>\n",
       "      <th>LLatencyKurt</th>\n",
       "      <th>RHoldKurt</th>\n",
       "      <th>RLatencyKurt</th>\n",
       "      <th>SHoldKurt</th>\n",
       "      <th>SLatencyKurt</th>\n",
       "      <th>LRHold_Diff</th>\n",
       "      <th>LLRRLatency_Diff</th>\n",
       "      <th>LRRLLatency_Diff</th>\n",
       "      <th>HoldMean</th>\n",
       "      <th>LatencyMean</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.114029</td>\n",
       "      <td>-0.032004</td>\n",
       "      <td>0.261211</td>\n",
       "      <td>0.209895</td>\n",
       "      <td>-0.110982</td>\n",
       "      <td>-0.154293</td>\n",
       "      <td>-0.085275</td>\n",
       "      <td>0.310571</td>\n",
       "      <td>0.210952</td>\n",
       "      <td>-0.205107</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.157054</td>\n",
       "      <td>0.123371</td>\n",
       "      <td>0.395695</td>\n",
       "      <td>-0.195403</td>\n",
       "      <td>-0.146881</td>\n",
       "      <td>-0.751353</td>\n",
       "      <td>0.569019</td>\n",
       "      <td>-0.398513</td>\n",
       "      <td>-0.121151</td>\n",
       "      <td>-0.026975</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1 rows × 101 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     LLHold  LLLatency    LRHold  LRLatency    LSHold  LSLatency    RLHold  \\\n",
       "0 -0.114029  -0.032004  0.261211   0.209895 -0.110982  -0.154293 -0.085275   \n",
       "\n",
       "   RLLatency    RRHold  RRLatency  ...  LLatencyKurt  RHoldKurt  RLatencyKurt  \\\n",
       "0   0.310571  0.210952  -0.205107  ...     -0.157054   0.123371      0.395695   \n",
       "\n",
       "   SHoldKurt  SLatencyKurt  LRHold_Diff  LLRRLatency_Diff  LRRLLatency_Diff  \\\n",
       "0  -0.195403     -0.146881    -0.751353          0.569019         -0.398513   \n",
       "\n",
       "   HoldMean  LatencyMean  \n",
       "0 -0.121151    -0.026975  \n",
       "\n",
       "[1 rows x 101 columns]"
      ]
     },
     "execution_count": 248,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame(pipe['logR'].coef_, columns = X_train.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
